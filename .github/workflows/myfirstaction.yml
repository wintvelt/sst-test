name: deployment workflow
on: 
  push:
    branches:
      - master
      - dev
    paths-ignore: # if only npm stack-output or package changed, we can ignore this update
      - 'npm/*-stack-output.json'
      - 'npm/package.json'
jobs:
  publish-dependencies:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SECRET_PUBLISH_TOKEN: ${{ secrets.SECRET_PUBLISH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      PROD_PUBLISH_ENDPOINT: https://urhe9nipda.execute-api.eu-central-1.amazonaws.com
      DEV_PUBLISH_ENDPOINT: https://6klsawe709.execute-api.eu-central-1.amazonaws.com
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          registry-url: https://registry.npmjs.org/
      - name: set env vars
        id: localenv
        run: |
          BRANCH=$(git branch --show-current)
          echo "::set-output name=branch::$BRANCH"
          if [[ $BRANCH == 'master' ]]; then
            echo "we are on MASTER branch"
            echo "::set-output name=STAGE::prod"
            echo "::set-output name=PUBLISH_ENDPOINT::${{ env.PROD_PUBLISH_ENDPOINT }}"
          else 
            echo "we are on DEV branch"
            echo "::set-output name=STAGE::dev"
            echo "::set-output name=PUBLISH_ENDPOINT::${{ env.DEV_PUBLISH_ENDPOINT }}"
          fi
      - name: set npm exists
        id: npm
        run: |
          if test -e npm; then
            echo "npm folder exists"
            echo "::set-output name=EXISTS::true"
          else
            echo "no npm folder here"
            echo "::set-output name=EXISTS::false"
          fi
      - name: Read package.json
        id: package
        uses: juliangruber/read-file-action@v1
        with:
          path: ./package.json
      - name: switch to hotfix branch
        id: branch
        run: |
          BRANCH=$(git branch --show-current)
          HOTFIX_BRANCH=$BRANCH-workflow-auto-hotfix
          echo "::set-output name=BRANCH::$BRANCH"
          echo "::set-output name=HOTFIX_BRANCH::$HOTFIX_BRANCH"
          git show-ref
          git ls-remote --heads git@github.com:${{ github.repository }}.git $HOTFIX_BRANCH
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions"
          if git show-ref --quiet refs/remotes/origin/$HOTFIX_BRANCH; then
            echo "found and deleted remote hotfix branch"
            git checkout $HOTFIX_BRANCH
            git merge $BRANCH -m "auto merge from deploy workflow"
          else
            echo "no remote hotfix branch $HOTFIX_BRANCH"
          fi
          if git show-ref --quiet refs/heads/$HOTFIX_BRANCH; then
            echo "did find hotfix branch"
            git checkout $HOTFIX_BRANCH
            git merge $BRANCH -m "auto merge from deploy workflow"
          else
            echo "did not find hotfix branch"
            git checkout -b $HOTFIX_BRANCH
          fi
          git branch
      - name: deploy and (if npm exists) save output in npm folder
        run: |
          npm install
          STAGE=${{ steps.localenv.outputs.STAGE }}
          if [[ ${{ steps.npm.outputs.EXISTS }} == 'true' ]]; then
            npx sst deploy --stage $STAGE --outputs-file ./npm/$STAGE-stack-output.json
            echo "saving stack output for $STAGE in npm root"
          else
            npx sst deploy --stage $STAGE
            echo "just deploy stack, no npm folder, so output not saved"
          fi
      - name: Publish dependencies
        uses: indiesdev/curl@v1
        with:
          url: ${{ steps.localenv.outputs.PUBLISH_ENDPOINT }}
          method: PUT
          headers: '{ "Content-Type": "application/json" }'
          body: '{ 
            "ownerName": "${{ github.repository }}", 
            "stage": "${{ steps.localenv.outputs.STAGE }}", 
            "pack": ${{ steps.package.outputs.content }},
            "authToken": "Basic ${{ secrets.SECRET_PUBLISH_TOKEN }}" 
            }'
          timeout: 5000
      - name: if npm exists - bump npm patch version and publish
        if: (steps.npm.outputs.EXISTS == 'true')
        env:
          NODE_AUTH_TOKEN: ${{ env.NPM_TOKEN }}
        run: |
          cd npm
          STAGE=${{ steps.localenv.outputs.STAGE }}
          if [[ $STAGE == 'dev' ]]; then
            if test -e prod-stack-output.json; then
              rm prod-stack-output.json
            fi
            npm version prepatch --preid dev
          else
            npm version patch
          fi
          npm publish --access=public
      - name: Add all changes and check if we need to commit files
        id: commit
        shell: bash
        run: |
          git add --all
          if [[ -z "$(git status --porcelain)" ]]; then
            echo "nothing changed"
            echo "::set-output name=PUSH::false"
          else
            echo "trying to commit"
            git commit -m "auto push from workflow run"
            echo "::set-output name=PUSH::true"
          fi
      - name: if something committed - Push changes out
        if: steps.commit.outputs.PUSH == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch.outputs.HOTFIX_BRANCH }}
      - name: if something committed - Create pull request
        if: steps.commit.outputs.PUSH == 'true'
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.branch.outputs.HOTFIX_BRANCH }}
          destination_branch: ${{ steps.branch.outputs.BRANCH }}
          pr_title: "Add stack output to npm folder for ${{ steps.branch.outputs.BRANCH }} branch"
          pr_body: ":crown: *An automated PR*"
          pr_label: "auto-pr"
          pr_draft: false
          github_token: ${{ secrets.GITHUB_TOKEN }}